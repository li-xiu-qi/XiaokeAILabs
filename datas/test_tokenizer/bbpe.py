import re
from collections import defaultdict, Counter
import time

def extract_frequencies(sequence):
    """
    给定一个字符串列表（代表句子或文档），计算每个词（已转换为字节并添加</w>）的出现频率。
    """
    token_counter = Counter()
    print("--- 初始分词 ---")
    for item in sequence:
        # 将字符串转换为UTF-8字节序列
        bytes_seq = item.encode('utf-8')
        # 将字节序列转换为字节值列表，以空格连接，并在末尾添加</w>表示词尾
        tokens = ' '.join(str(b) for b in bytes_seq) + ' </w>'
        token_counter[tokens] += 1
        print(f"输入: '{item}' -> 字节: '{' '.join(str(b) for b in bytes_seq)}' -> 分词: '{tokens}'")
    print("-" * 28)
    return token_counter

def frequency_of_pairs(frequencies):
    """
    给定一个词频字典 {token_string: count}，计算所有相邻子词对的出现频率。
    token_string 是像 "228 184 173 228 ... </w>" 这样的字符串（UTF-8字节值）。
    """
    pairs_count = Counter()
    for token_string, count in frequencies.items():
        bytes_tokens = token_string.split()  # 按空格分割成字节值列表
        for i in range(len(bytes_tokens) - 1):
            pair = (bytes_tokens[i], bytes_tokens[i+1])  # 创建相邻对
            pairs_count[pair] += count  # 累加该对的频率
    return pairs_count

def merge_vocab(merge_pair, vocab):
    """
    给定一个要合并的字节对 (byte1, byte2) 和一个词频字典 vocab {token_string: count}，
    将 vocab 中所有出现的 "byte1 byte2" 合并为 "byte1byte2"，并返回更新后的词频字典。
    """
    # 创建正则表达式，匹配独立的 pair
    re_pattern_str = r'(?<!\S)' + re.escape(merge_pair[0]) + r' ' + re.escape(merge_pair[1]) + r'(?!\S)'
    pattern = re.compile(re_pattern_str)
    merged_token = ''.join(merge_pair)  # 合并后的新子词

    updated_tokens = {}
    for token_string, freq in vocab.items():
        # 使用 re.sub 替换所有匹配的 pair
        new_token_string = pattern.sub(merged_token, token_string)
        updated_tokens[new_token_string] = freq  # 更新字典
    return updated_tokens

def encode_with_bbpe(texts, iterations):
    """
    给定待分词的数据（字符串列表）以及最大合并次数，执行 BBPE 算法，返回最终的词表。
    """
    # 1. 初始化词表：基于UTF-8字节值和词尾标记 </w>
    vocab_map = extract_frequencies(texts)
    print("初始词汇表:", vocab_map)
    print("-" * 28 + "\n")

    merges = []  # 记录合并规则

    # 2. 迭代合并
    for i in range(iterations):
        print(f"--- 迭代 {i+1}/{iterations} ---")
        # 2.1 计算当前词表中所有相邻字节对的频率
        pair_freqs = frequency_of_pairs(vocab_map)

        # 2.2 如果没有可合并的对，则停止
        if not pair_freqs:
            print(f"没有更多可合并的对。在迭代 {i} 停止。")
            break

        # 2.3 找到频率最高的对
        most_common_pair, freq = pair_freqs.most_common(1)[0]

        print(f"最高频率对: {most_common_pair} 频率为 {freq}")
        merges.append(most_common_pair)  # 记录合并操作

        # 2.4 合并最高频对，更新词表
        vocab_map = merge_vocab(most_common_pair, vocab_map)
        print("当前词汇表:", vocab_map)
        print("-" * 28 + "\n")
        time.sleep(0.5)  # 加入短暂延时，方便观察过程

    return vocab_map, merges

# 字节到原始文本的映射函数，用于可视化结果
def bytes_to_text(byte_string):
    """
    将字节值字符串（如 "228 184 173"）转换回原始文本
    """
    try:
        # 分割字符串并移除 </w> 标记
        byte_values = [int(b) for b in byte_string.replace("</w>", "").strip().split()]
        # 将字节值转换为字节数组
        byte_array = bytes(byte_values)
        # 将字节数组解码为UTF-8文本
        return byte_array.decode('utf-8')
    except:
        # 如果字节序列不是有效的UTF-8，返回原始字节值
        return byte_string

# --- 使用示例 ---
data = ["低温会使硅基芯片性能降低", "高温会使碳基芯片性能提高"]

# 设定合并次数
num_merges = 6

# 执行 BBPE 编码
final_bbpe_vocab, learned_merges = encode_with_bbpe(data, num_merges)

print("\n" + "=" * 30)
print("--- 最终BBPE词汇表 ---")
for token_string, freq in final_bbpe_vocab.items():
    # 显示字节序列和它们对应的原始文本（如果可能）
    print(f"'{token_string}' -> '{bytes_to_text(token_string)}' : {freq}")

print("\n--- 学习到的合并规则（按顺序） ---")
for idx, pair in enumerate(learned_merges):
    print(f"{idx+1}: {pair}")
print("=" * 30)


"""
--- 初始分词 ---
输入: '低温会使硅基芯片性能降低' -> 字节: '228 189 142 230 184 169 228 188 154 228 189 191 231 161 133 229 159 186 232 138 175 231 137 135 230 128 167 232 131 189 233 153 141 228 189 142' -> 分词: '228 189 142 230 184 169 228 188 154 228 189 191 231 161 133 229 159 186 232 138 175 231 137 135 230 128 167 232 131 189 233 153 141 228 189 142 </w>'
输入: '高温会使碳基芯片性能提高' -> 字节: '233 171 152 230 184 169 228 188 154 228 189 191 231 162 179 229 159 186 232 138 175 231 137 135 230 128 167 232 131 189 230 143 144 233 171 152' -> 分词: '233 171 152 230 184 169 228 188 154 228 189 191 231 162 179 229 159 186 232 138 175 231 137 135 230 128 167 232 131 189 230 143 144 233 171 152 </w>'
----------------------------
初始词汇表: Counter({'228 189 142 230 184 169 228 188 154 228 189 191 231 161 133 229 159 186 232 138 175 231 137 135 230 128 167 232 131 189 233 153 141 228 189 142 </w>': 1, '233 171 152 230 184 169 228 188 154 228 189 191 231 162 179 229 159 186 232 138 175 231 137 135 230 128 167 232 131 189 230 143 144 233 171 152 </w>': 1})
----------------------------

--- 迭代 1/6 ---
最高频率对: ('228', '189') 频率为 4
当前词汇表: {'228189 142 230 184 169 228 188 154 228189 191 231 161 133 229 159 186 232 138 175 231 137 135 230 128 167 232 131 189 233 153 141 228189 142 </w>': 1, '233 171 152 230 184 169 228 188 154 228189 191 231 162 179 229 159 186 232 138 175 231 137 135 230 128 167 232 131 189 230 143 144 233 171 152 </w>': 1}
----------------------------

--- 迭代 2/6 ---
最高频率对: ('228189', '142') 频率为 2
当前词汇表: {'228189142 230 184 169 228 188 154 228189 191 231 161 133 229 159 186 232 138 175 231 137 135 230 128 167 232 131 189 233 153 141 228189142 </w>': 1, '233 171 152 230 184 169 228 188 154 228189 191 231 162 179 229 159 186 232 138 175 231 137 135 230 128 167 232 131 189 230 143 144 233 171 152 </w>': 1}
----------------------------

--- 迭代 3/6 ---
最高频率对: ('230', '184') 频率为 2
当前词汇表: {'228189142 230184 169 228 188 154 228189 191 231 161 133 229 159 186 232 138 175 231 137 135 230 128 167 232 131 189 233 153 141 228189142 </w>': 1, '233 171 152 230184 169 228 188 154 228189 191 231 162 179 229 159 186 232 138 175 231 137 135 230 128 167 232 131 189 230 143 144 233 171 152 </w>': 1}
----------------------------

--- 迭代 4/6 ---
最高频率对: ('230184', '169') 频率为 2
当前词汇表: {'228189142 230184169 228 188 154 228189 191 231 161 133 229 159 186 232 138 175 231 137 135 230 128 167 232 131 189 233 153 141 228189142 </w>': 1, '233 171 152 230184169 228 188 154 228189 191 231 162 179 229 159 186 232 138 175 231 137 135 230 128 167 232 131 189 230 143 144 233 171 152 </w>': 1}
----------------------------

--- 迭代 5/6 ---
最高频率对: ('230184169', '228') 频率为 2
当前词汇表: {'228189142 230184169228 188 154 228189 191 231 161 133 229 159 186 232 138 175 231 137 135 230 128 167 232 131 189 233 153 141 228189142 </w>': 1, '233 171 152 230184169228 188 154 228189 191 231 162 179 229 159 186 232 138 175 231 137 135 230 128 167 232 131 189 230 143 144 233 171 152 </w>': 1}
----------------------------

--- 迭代 6/6 ---
最高频率对: ('230184169228', '188') 频率为 2
当前词汇表: {'228189142 230184169228188 154 228189 191 231 161 133 229 159 186 232 138 175 231 137 135 230 128 167 232 131 189 233 153 141 228189142 </w>': 1, '233 171 152 230184169228188 154 228189 191 231 162 179 229 159 186 232 138 175 231 137 135 230 128 167 232 131 189 230 143 144 233 171 152 </w>': 1}
----------------------------


==============================
--- 最终BBPE词汇表 ---
'228189142 230184169228188 154 228189 191 231 161 133 229 159 186 232 138 175 231 137 135 230 128 167 232 131 189 233 153 141 228189142 </w>' -> '228189142 230184169228188 154 228189 191 231 161 133 229 159 186 232 138 175 231 137 135 230 128 167 232 131 189 233 153 141 228189142 </w>' : 1
'233 171 152 230184169228188 154 228189 191 231 162 179 229 159 186 232 138 175 231 137 135 230 128 167 232 131 189 230 143 144 233 171 152 </w>' -> '233 171 152 230184169228188 154 228189 191 231 162 179 229 159 186 232 138 175 231 137 135 230 128 167 232 131 189 230 143 144 233 171 152 </w>' : 1

--- 学习到的合并规则（按顺序） ---
1: ('228', '189')
2: ('228189', '142')
3: ('230', '184')
4: ('230184', '169')
5: ('230184169', '228')
6: ('230184169228', '188')
==============================
"""